// odrive_reg_0_6_7.hpp
// Odrive firmware version: 0.6.7
// Odrive hardware version: 4.4.58
// Generated from https://odrive-cdn.nyc3.digitaloceanspaces.com/releases/firmware/mMc8t2oh7LIRmajpjWT2-V3AlPUlHo5VmvBABRYesCw/flat_endpoints.json
#ifndef ODRIVE_REG_0_6_7_HPP
#define ODRIVE_REG_0_6_7_HPP
#include <string_view>
#include "odrive_reg_type.hpp"

namespace odrive_reg {
    constexpr std::string_view fw_version = "0.6.7";
    constexpr std::string_view hw_version = "4.4.58";

 } // namespace odrive_reg

namespace odrive_reg::endpoints {

    using vbus_voltage = OdriveReg<1, OdriveRegType::Float, true, false>;
    using ibus = OdriveReg<2, OdriveRegType::Float, true, false>;
    using ibus_report_filter_k = OdriveReg<3, OdriveRegType::Float, true, false>;
    using serial_number = OdriveReg<4, OdriveRegType::UInt64, true, false>;
    using hw_version_major = OdriveReg<5, OdriveRegType::UInt8, true, false>;
    using hw_version_minor = OdriveReg<6, OdriveRegType::UInt8, true, false>;
    using hw_version_variant = OdriveReg<7, OdriveRegType::UInt8, true, false>;
    using hw_version_revision = OdriveReg<8, OdriveRegType::UInt8, true, false>;
    using fw_version_major = OdriveReg<9, OdriveRegType::UInt8, true, false>;
    using fw_version_minor = OdriveReg<10, OdriveRegType::UInt8, true, false>;
    using fw_version_revision = OdriveReg<11, OdriveRegType::UInt8, true, false>;
    using commit_hash = OdriveReg<12, OdriveRegType::UInt32, true, false>;
    using fw_version_unreleased = OdriveReg<13, OdriveRegType::UInt8, true, false>;
    using bootloader_version = OdriveReg<14, OdriveRegType::UInt32, true, false>;
    using n_evt_sampling = OdriveReg<15, OdriveRegType::UInt32, true, false>;
    using n_evt_control_loop = OdriveReg<16, OdriveRegType::UInt32, true, false>;
    using task_timers_armed = OdriveReg<17, OdriveRegType::Bool, true, false>;
    using task_times__sampling__start_time = OdriveReg<18, OdriveRegType::UInt32, true, false>;
    using task_times__sampling__end_time = OdriveReg<19, OdriveRegType::UInt32, true, false>;
    using task_times__sampling__length = OdriveReg<20, OdriveRegType::UInt32, true, false>;
    using task_times__sampling__max_length = OdriveReg<21, OdriveRegType::UInt32, true, false>;
    using task_times__encoder_update__start_time = OdriveReg<22, OdriveRegType::UInt32, true, false>;
    using task_times__encoder_update__end_time = OdriveReg<23, OdriveRegType::UInt32, true, false>;
    using task_times__encoder_update__length = OdriveReg<24, OdriveRegType::UInt32, true, false>;
    using task_times__encoder_update__max_length = OdriveReg<25, OdriveRegType::UInt32, true, false>;
    using task_times__control_loop_misc__start_time = OdriveReg<26, OdriveRegType::UInt32, true, false>;
    using task_times__control_loop_misc__end_time = OdriveReg<27, OdriveRegType::UInt32, true, false>;
    using task_times__control_loop_misc__length = OdriveReg<28, OdriveRegType::UInt32, true, false>;
    using task_times__control_loop_misc__max_length = OdriveReg<29, OdriveRegType::UInt32, true, false>;
    using task_times__control_loop_checks__start_time = OdriveReg<30, OdriveRegType::UInt32, true, false>;
    using task_times__control_loop_checks__end_time = OdriveReg<31, OdriveRegType::UInt32, true, false>;
    using task_times__control_loop_checks__length = OdriveReg<32, OdriveRegType::UInt32, true, false>;
    using task_times__control_loop_checks__max_length = OdriveReg<33, OdriveRegType::UInt32, true, false>;
    using task_times__current_sense_wait__start_time = OdriveReg<34, OdriveRegType::UInt32, true, false>;
    using task_times__current_sense_wait__end_time = OdriveReg<35, OdriveRegType::UInt32, true, false>;
    using task_times__current_sense_wait__length = OdriveReg<36, OdriveRegType::UInt32, true, false>;
    using task_times__current_sense_wait__max_length = OdriveReg<37, OdriveRegType::UInt32, true, false>;
    using task_times__dc_calib_wait__start_time = OdriveReg<38, OdriveRegType::UInt32, true, false>;
    using task_times__dc_calib_wait__end_time = OdriveReg<39, OdriveRegType::UInt32, true, false>;
    using task_times__dc_calib_wait__length = OdriveReg<40, OdriveRegType::UInt32, true, false>;
    using task_times__dc_calib_wait__max_length = OdriveReg<41, OdriveRegType::UInt32, true, false>;
    using system_stats__uptime = OdriveReg<42, OdriveRegType::UInt32, true, false>;
    using system_stats__min_heap_space = OdriveReg<43, OdriveRegType::UInt32, true, false>;
    using system_stats__max_stack_usage_axis = OdriveReg<44, OdriveRegType::UInt32, true, false>;
    using system_stats__max_stack_usage_usb = OdriveReg<45, OdriveRegType::UInt32, true, false>;
    using system_stats__max_stack_usage_uart = OdriveReg<46, OdriveRegType::UInt32, true, false>;
    using system_stats__max_stack_usage_can = OdriveReg<47, OdriveRegType::UInt32, true, false>;
    using system_stats__max_stack_usage_startup = OdriveReg<48, OdriveRegType::UInt32, true, false>;
    using system_stats__stack_size_axis = OdriveReg<49, OdriveRegType::UInt32, true, false>;
    using system_stats__stack_size_usb = OdriveReg<50, OdriveRegType::UInt32, true, false>;
    using system_stats__stack_size_uart = OdriveReg<51, OdriveRegType::UInt32, true, false>;
    using system_stats__stack_size_startup = OdriveReg<52, OdriveRegType::UInt32, true, false>;
    using system_stats__stack_size_can = OdriveReg<53, OdriveRegType::UInt32, true, false>;
    using system_stats__prio_axis = OdriveReg<54, OdriveRegType::Int32, true, false>;
    using system_stats__prio_usb = OdriveReg<55, OdriveRegType::Int32, true, false>;
    using system_stats__prio_uart = OdriveReg<56, OdriveRegType::Int32, true, false>;
    using system_stats__prio_startup = OdriveReg<57, OdriveRegType::Int32, true, false>;
    using system_stats__prio_can = OdriveReg<58, OdriveRegType::Int32, true, false>;
    using system_stats__usb__rx_cnt = OdriveReg<59, OdriveRegType::UInt32, true, false>;
    using system_stats__usb__tx_cnt = OdriveReg<60, OdriveRegType::UInt32, true, false>;
    using system_stats__usb__tx_overrun_cnt = OdriveReg<61, OdriveRegType::UInt32, true, false>;
    using system_stats__i2c__addr = OdriveReg<62, OdriveRegType::UInt8, true, false>;
    using system_stats__i2c__addr_match_cnt = OdriveReg<63, OdriveRegType::UInt32, true, false>;
    using system_stats__i2c__rx_cnt = OdriveReg<64, OdriveRegType::UInt32, true, false>;
    using system_stats__i2c__error_cnt = OdriveReg<65, OdriveRegType::UInt32, true, false>;
    using user_config_loaded = OdriveReg<66, OdriveRegType::UInt32, true, false>;
    using misconfigured = OdriveReg<67, OdriveRegType::Bool, true, false>;
    using oscilloscope__size = OdriveReg<68, OdriveRegType::UInt32, true, false>;
    using oscilloscope__pos = OdriveReg<69, OdriveRegType::UInt32, true, false>;
    using oscilloscope__rollover = OdriveReg<70, OdriveRegType::Bool, true, false>;
    using oscilloscope__recording = OdriveReg<71, OdriveRegType::Bool, true, false>;
    using oscilloscope__config = OdriveReg<72, OdriveRegType::Function, false, false>;
    using oscilloscope__trigger = OdriveReg<82, OdriveRegType::Function, false, false>;
    using oscilloscope__trigger_high_res = OdriveReg<84, OdriveRegType::Function, false, false>;
    using oscilloscope__get_raw = OdriveReg<85, OdriveRegType::Function, false, false>;
    using debug__hal_ticks = OdriveReg<91, OdriveRegType::UInt32, true, false>;
    using debug__block = OdriveReg<92, OdriveRegType::Function, false, false>;
    using can__error = OdriveReg<94, OdriveRegType::UInt8, true, false>;
    using can__n_restarts = OdriveReg<95, OdriveRegType::UInt32, true, false>;
    using can__n_rx = OdriveReg<96, OdriveRegType::UInt32, true, false>;
    using can__config__baud_rate = OdriveReg<97, OdriveRegType::UInt32, true, false>;
    using can__config__protocol = OdriveReg<98, OdriveRegType::UInt8, true, false>;
    using test_property = OdriveReg<99, OdriveRegType::UInt32, true, false>;
    using identify = OdriveReg<100, OdriveRegType::Bool, true, false>;
    using reboot_required = OdriveReg<101, OdriveRegType::Bool, true, false>;
    using amt21_encoder_group0__status = OdriveReg<102, OdriveRegType::UInt8, true, false>;
    using amt21_encoder_group0__raw = OdriveReg<103, OdriveRegType::Float, true, false>;
    using amt21_encoder_group0__config__enable = OdriveReg<104, OdriveRegType::Bool, true, false>;
    using amt21_encoder_group0__config__rs485 = OdriveReg<105, OdriveRegType::UInt8, true, false>;
    using amt21_encoder_group0__config__gpio = OdriveReg<106, OdriveRegType::UInt8, true, false>;
    using amt21_encoder_group0__config__addr0 = OdriveReg<107, OdriveRegType::UInt8, true, false>;
    using amt21_encoder_group0__config__event_driven_mode = OdriveReg<108, OdriveRegType::Bool, true, false>;
    using issues__length = OdriveReg<109, OdriveRegType::UInt32, true, false>;
    using issues__get = OdriveReg<110, OdriveRegType::Function, false, false>;
    using auth__get_pub_key1 = OdriveReg<116, OdriveRegType::Function, false, false>;
    using auth__get_cert1 = OdriveReg<125, OdriveRegType::Function, false, false>;
    using auth__auth1 = OdriveReg<131, OdriveRegType::Function, false, false>;
    using config__enable_uart_a = OdriveReg<144, OdriveRegType::Bool, true, false>;
    using config__uart_a_baudrate = OdriveReg<145, OdriveRegType::UInt32, true, false>;
    using config__enable_can_a = OdriveReg<146, OdriveRegType::Bool, true, false>;
    using config__usb_cdc_protocol = OdriveReg<147, OdriveRegType::UInt8, true, false>;
    using config__uart0_protocol = OdriveReg<148, OdriveRegType::UInt8, true, false>;
    using config__max_regen_current = OdriveReg<149, OdriveRegType::Float, true, false>;
    using config__dc_bus_undervoltage_trip_level = OdriveReg<150, OdriveRegType::Float, true, false>;
    using config__dc_bus_overvoltage_trip_level = OdriveReg<151, OdriveRegType::Float, true, false>;
    using config__dc_max_positive_current = OdriveReg<152, OdriveRegType::Float, true, false>;
    using config__dc_max_negative_current = OdriveReg<153, OdriveRegType::Float, true, false>;
    using config__gpio0_mode = OdriveReg<154, OdriveRegType::UInt8, true, false>;
    using config__gpio1_mode = OdriveReg<155, OdriveRegType::UInt8, true, false>;
    using config__gpio2_mode = OdriveReg<156, OdriveRegType::UInt8, true, false>;
    using config__gpio3_mode = OdriveReg<157, OdriveRegType::UInt8, true, false>;
    using config__gpio4_mode = OdriveReg<158, OdriveRegType::UInt8, true, false>;
    using config__gpio5_mode = OdriveReg<159, OdriveRegType::UInt8, true, false>;
    using config__gpio6_mode = OdriveReg<160, OdriveRegType::UInt8, true, false>;
    using config__gpio7_mode = OdriveReg<161, OdriveRegType::UInt8, true, false>;
    using config__gpio8_mode = OdriveReg<162, OdriveRegType::UInt8, true, false>;
    using config__gpio9_mode = OdriveReg<163, OdriveRegType::UInt8, true, false>;
    using config__gpio10_mode = OdriveReg<164, OdriveRegType::UInt8, true, false>;
    using config__gpio11_mode = OdriveReg<165, OdriveRegType::UInt8, true, false>;
    using config__gpio12_mode = OdriveReg<166, OdriveRegType::UInt8, true, false>;
    using config__gpio13_mode = OdriveReg<167, OdriveRegType::UInt8, true, false>;
    using config__gpio14_mode = OdriveReg<168, OdriveRegType::UInt8, true, false>;
    using config__gpio15_mode = OdriveReg<169, OdriveRegType::UInt8, true, false>;
    using config__gpio16_mode = OdriveReg<170, OdriveRegType::UInt8, true, false>;
    using config__gpio17_mode = OdriveReg<171, OdriveRegType::UInt8, true, false>;
    using config__gpio18_mode = OdriveReg<172, OdriveRegType::UInt8, true, false>;
    using config__gpio8_pwm_mapping__endpoint = OdriveReg<173, OdriveRegType::EndpointRef, true, false>;
    using config__gpio8_pwm_mapping__min = OdriveReg<174, OdriveRegType::Float, true, false>;
    using config__gpio8_pwm_mapping__max = OdriveReg<175, OdriveRegType::Float, true, false>;
    using config__gpio9_pwm_mapping__endpoint = OdriveReg<176, OdriveRegType::EndpointRef, true, false>;
    using config__gpio9_pwm_mapping__min = OdriveReg<177, OdriveRegType::Float, true, false>;
    using config__gpio9_pwm_mapping__max = OdriveReg<178, OdriveRegType::Float, true, false>;
    using config__gpio15_analog_mapping__endpoint = OdriveReg<179, OdriveRegType::EndpointRef, true, false>;
    using config__gpio15_analog_mapping__min = OdriveReg<180, OdriveRegType::Float, true, false>;
    using config__gpio15_analog_mapping__max = OdriveReg<181, OdriveRegType::Float, true, false>;
    using config__gpio16_analog_mapping__endpoint = OdriveReg<182, OdriveRegType::EndpointRef, true, false>;
    using config__gpio16_analog_mapping__min = OdriveReg<183, OdriveRegType::Float, true, false>;
    using config__gpio16_analog_mapping__max = OdriveReg<184, OdriveRegType::Float, true, false>;
    using config__inverter0__current_soft_max = OdriveReg<185, OdriveRegType::Float, true, false>;
    using config__inverter0__current_hard_max = OdriveReg<186, OdriveRegType::Float, true, false>;
    using config__inverter0__temp_limit_lower = OdriveReg<187, OdriveRegType::Float, true, false>;
    using config__inverter0__temp_limit_upper = OdriveReg<188, OdriveRegType::Float, true, false>;
    using config__inverter0__shunt_conductance = OdriveReg<189, OdriveRegType::Float, true, false>;
    using config__inverter0__drv_config = OdriveReg<190, OdriveRegType::UInt64, true, false>;
    using config__odrv_fan__upper = OdriveReg<191, OdriveRegType::Float, true, false>;
    using config__odrv_fan__lower = OdriveReg<192, OdriveRegType::Float, true, false>;
    using config__odrv_fan__enabled = OdriveReg<193, OdriveRegType::Bool, true, false>;
    using config__motor_fan__upper = OdriveReg<194, OdriveRegType::Float, true, false>;
    using config__motor_fan__lower = OdriveReg<195, OdriveRegType::Float, true, false>;
    using config__motor_fan__enabled = OdriveReg<196, OdriveRegType::Bool, true, false>;
    using axis0__active_errors = OdriveReg<197, OdriveRegType::UInt32, true, false>;
    using axis0__disarm_reason = OdriveReg<198, OdriveRegType::UInt32, true, false>;
    using axis0__step_dir_active = OdriveReg<199, OdriveRegType::Bool, true, false>;
    using axis0__last_drv_fault = OdriveReg<200, OdriveRegType::UInt32, true, false>;
    using axis0__steps = OdriveReg<201, OdriveRegType::Int64, true, false>;
    using axis0__current_state = OdriveReg<202, OdriveRegType::UInt8, true, false>;
    using axis0__requested_state = OdriveReg<203, OdriveRegType::UInt8, true, false>;
    using axis0__is_homed = OdriveReg<204, OdriveRegType::Bool, true, false>;
    using axis0__config__startup_max_wait_for_ready = OdriveReg<205, OdriveRegType::Float, true, false>;
    using axis0__config__startup_motor_calibration = OdriveReg<206, OdriveRegType::Bool, true, false>;
    using axis0__config__startup_encoder_index_search = OdriveReg<207, OdriveRegType::Bool, true, false>;
    using axis0__config__startup_encoder_offset_calibration = OdriveReg<208, OdriveRegType::Bool, true, false>;
    using axis0__config__startup_closed_loop_control = OdriveReg<209, OdriveRegType::Bool, true, false>;
    using axis0__config__startup_homing = OdriveReg<210, OdriveRegType::Bool, true, false>;
    using axis0__config__enable_step_dir = OdriveReg<211, OdriveRegType::Bool, true, false>;
    using axis0__config__step_dir_always_on = OdriveReg<212, OdriveRegType::Bool, true, false>;
    using axis0__config__calib_range = OdriveReg<213, OdriveRegType::Float, true, false>;
    using axis0__config__calib_scan_distance = OdriveReg<214, OdriveRegType::Float, true, false>;
    using axis0__config__calib_scan_vel = OdriveReg<215, OdriveRegType::Float, true, false>;
    using axis0__config__index_search_at_target_vel_only = OdriveReg<216, OdriveRegType::Bool, true, false>;
    using axis0__config__watchdog_timeout = OdriveReg<217, OdriveRegType::Float, true, false>;
    using axis0__config__enable_watchdog = OdriveReg<218, OdriveRegType::Bool, true, false>;
    using axis0__config__step_gpio_pin = OdriveReg<219, OdriveRegType::UInt16, true, false>;
    using axis0__config__dir_gpio_pin = OdriveReg<220, OdriveRegType::UInt16, true, false>;
    using axis0__config__error_gpio_pin = OdriveReg<221, OdriveRegType::UInt16, true, false>;
    using axis0__config__enable_error_gpio = OdriveReg<222, OdriveRegType::Bool, true, false>;
    using axis0__config__calibration_lockin__current = OdriveReg<223, OdriveRegType::Float, true, false>;
    using axis0__config__calibration_lockin__ramp_time = OdriveReg<224, OdriveRegType::Float, true, false>;
    using axis0__config__calibration_lockin__ramp_distance = OdriveReg<225, OdriveRegType::Float, true, false>;
    using axis0__config__calibration_lockin__accel = OdriveReg<226, OdriveRegType::Float, true, false>;
    using axis0__config__calibration_lockin__vel = OdriveReg<227, OdriveRegType::Float, true, false>;
    using axis0__config__sensorless_ramp__initial_pos = OdriveReg<228, OdriveRegType::Float, true, false>;
    using axis0__config__sensorless_ramp__current = OdriveReg<229, OdriveRegType::Float, true, false>;
    using axis0__config__sensorless_ramp__ramp_time = OdriveReg<230, OdriveRegType::Float, true, false>;
    using axis0__config__sensorless_ramp__ramp_distance = OdriveReg<231, OdriveRegType::Float, true, false>;
    using axis0__config__sensorless_ramp__accel = OdriveReg<232, OdriveRegType::Float, true, false>;
    using axis0__config__sensorless_ramp__vel = OdriveReg<233, OdriveRegType::Float, true, false>;
    using axis0__config__sensorless_ramp__finish_distance = OdriveReg<234, OdriveRegType::Float, true, false>;
    using axis0__config__sensorless_ramp__finish_on_vel = OdriveReg<235, OdriveRegType::Bool, true, false>;
    using axis0__config__sensorless_ramp__finish_on_distance = OdriveReg<236, OdriveRegType::Bool, true, false>;
    using axis0__config__general_lockin__initial_pos = OdriveReg<237, OdriveRegType::Float, true, false>;
    using axis0__config__general_lockin__current = OdriveReg<238, OdriveRegType::Float, true, false>;
    using axis0__config__general_lockin__ramp_time = OdriveReg<239, OdriveRegType::Float, true, false>;
    using axis0__config__general_lockin__ramp_distance = OdriveReg<240, OdriveRegType::Float, true, false>;
    using axis0__config__general_lockin__accel = OdriveReg<241, OdriveRegType::Float, true, false>;
    using axis0__config__general_lockin__vel = OdriveReg<242, OdriveRegType::Float, true, false>;
    using axis0__config__general_lockin__finish_distance = OdriveReg<243, OdriveRegType::Float, true, false>;
    using axis0__config__general_lockin__finish_on_vel = OdriveReg<244, OdriveRegType::Bool, true, false>;
    using axis0__config__general_lockin__finish_on_distance = OdriveReg<245, OdriveRegType::Bool, true, false>;
    using axis0__config__can__node_id = OdriveReg<246, OdriveRegType::UInt32, true, false>;
    using axis0__config__can__is_extended = OdriveReg<247, OdriveRegType::Bool, true, false>;
    using axis0__config__can__version_msg_rate_ms = OdriveReg<248, OdriveRegType::UInt32, true, false>;
    using axis0__config__can__heartbeat_msg_rate_ms = OdriveReg<249, OdriveRegType::UInt32, true, false>;
    using axis0__config__can__encoder_msg_rate_ms = OdriveReg<250, OdriveRegType::UInt32, true, false>;
    using axis0__config__can__iq_msg_rate_ms = OdriveReg<251, OdriveRegType::UInt32, true, false>;
    using axis0__config__can__error_msg_rate_ms = OdriveReg<252, OdriveRegType::UInt32, true, false>;
    using axis0__config__can__temperature_msg_rate_ms = OdriveReg<253, OdriveRegType::UInt32, true, false>;
    using axis0__config__can__bus_voltage_msg_rate_ms = OdriveReg<254, OdriveRegType::UInt32, true, false>;
    using axis0__config__can__torques_msg_rate_ms = OdriveReg<255, OdriveRegType::UInt32, true, false>;
    using axis0__config__load_encoder = OdriveReg<256, OdriveRegType::UInt8, true, false>;
    using axis0__config__commutation_encoder = OdriveReg<257, OdriveRegType::UInt8, true, false>;
    using axis0__config__encoder_bandwidth = OdriveReg<258, OdriveRegType::Float, true, false>;
    using axis0__config__I_bus_hard_min = OdriveReg<259, OdriveRegType::Float, true, false>;
    using axis0__config__I_bus_hard_max = OdriveReg<260, OdriveRegType::Float, true, false>;
    using axis0__config__torque_soft_min = OdriveReg<261, OdriveRegType::Float, true, false>;
    using axis0__config__torque_soft_max = OdriveReg<262, OdriveRegType::Float, true, false>;
    using axis0__config__motor__motor_type = OdriveReg<263, OdriveRegType::UInt8, true, false>;
    using axis0__config__motor__pole_pairs = OdriveReg<264, OdriveRegType::UInt32, true, false>;
    using axis0__config__motor__phase_resistance = OdriveReg<265, OdriveRegType::Float, true, false>;
    using axis0__config__motor__phase_inductance = OdriveReg<266, OdriveRegType::Float, true, false>;
    using axis0__config__motor__phase_resistance_valid = OdriveReg<267, OdriveRegType::Bool, true, false>;
    using axis0__config__motor__phase_inductance_valid = OdriveReg<268, OdriveRegType::Bool, true, false>;
    using axis0__config__motor__torque_constant = OdriveReg<269, OdriveRegType::Float, true, false>;
    using axis0__config__motor__direction = OdriveReg<270, OdriveRegType::Float, true, false>;
    using axis0__config__motor__current_control_bandwidth = OdriveReg<271, OdriveRegType::Float, true, false>;
    using axis0__config__motor__wL_FF_enable = OdriveReg<272, OdriveRegType::Bool, true, false>;
    using axis0__config__motor__bEMF_FF_enable = OdriveReg<273, OdriveRegType::Bool, true, false>;
    using axis0__config__motor__ff_pm_flux_linkage = OdriveReg<274, OdriveRegType::Float, true, false>;
    using axis0__config__motor__ff_pm_flux_linkage_valid = OdriveReg<275, OdriveRegType::Bool, true, false>;
    using axis0__config__motor__motor_model_l_d = OdriveReg<276, OdriveRegType::Float, true, false>;
    using axis0__config__motor__motor_model_l_q = OdriveReg<277, OdriveRegType::Float, true, false>;
    using axis0__config__motor__motor_model_l_dq_valid = OdriveReg<278, OdriveRegType::Bool, true, false>;
    using axis0__config__motor__calibration_current = OdriveReg<279, OdriveRegType::Float, true, false>;
    using axis0__config__motor__resistance_calib_max_voltage = OdriveReg<280, OdriveRegType::Float, true, false>;
    using axis0__config__motor__current_soft_max = OdriveReg<281, OdriveRegType::Float, true, false>;
    using axis0__config__motor__current_hard_max = OdriveReg<282, OdriveRegType::Float, true, false>;
    using axis0__config__motor__current_slew_rate_limit = OdriveReg<283, OdriveRegType::Float, true, false>;
    using axis0__config__motor__fw_enable = OdriveReg<284, OdriveRegType::Bool, true, false>;
    using axis0__config__motor__fw_mod_setpoint = OdriveReg<285, OdriveRegType::Float, true, false>;
    using axis0__config__motor__fw_fb_bandwidth = OdriveReg<286, OdriveRegType::Float, true, false>;
    using axis0__config__motor__acim_gain_min_flux = OdriveReg<287, OdriveRegType::Float, true, false>;
    using axis0__config__motor__acim_autoflux_enable = OdriveReg<288, OdriveRegType::Bool, true, false>;
    using axis0__config__motor__acim_autoflux_min_Id = OdriveReg<289, OdriveRegType::Float, true, false>;
    using axis0__config__motor__acim_autoflux_attack_gain = OdriveReg<290, OdriveRegType::Float, true, false>;
    using axis0__config__motor__acim_autoflux_decay_gain = OdriveReg<291, OdriveRegType::Float, true, false>;
    using axis0__config__motor__acim_nominal_slip_vel = OdriveReg<292, OdriveRegType::Float, true, false>;
    using axis0__config__motor__sensorless_observer_gain = OdriveReg<293, OdriveRegType::Float, true, false>;
    using axis0__config__motor__sensorless_pll_bandwidth = OdriveReg<294, OdriveRegType::Float, true, false>;
    using axis0__config__motor__sensorless_pm_flux_linkage = OdriveReg<295, OdriveRegType::Float, true, false>;
    using axis0__config__motor__sensorless_pm_flux_linkage_valid = OdriveReg<296, OdriveRegType::Bool, true, false>;
    using axis0__config__anticogging__enabled = OdriveReg<297, OdriveRegType::Bool, true, false>;
    using axis0__config__anticogging__max_torque = OdriveReg<298, OdriveRegType::Float, true, false>;
    using axis0__config__anticogging__calib_start_vel = OdriveReg<299, OdriveRegType::Float, true, false>;
    using axis0__config__anticogging__calib_end_vel = OdriveReg<300, OdriveRegType::Float, true, false>;
    using axis0__config__anticogging__calib_coarse_tuning_duration = OdriveReg<301, OdriveRegType::Float, true, false>;
    using axis0__config__anticogging__calib_fine_tuning_duration = OdriveReg<302, OdriveRegType::Float, true, false>;
    using axis0__config__anticogging__calib_coarse_integrator_gain = OdriveReg<303, OdriveRegType::Float, true, false>;
    using axis0__config__anticogging__set_map = OdriveReg<304, OdriveRegType::Function, false, false>;
    using axis0__config__anticogging__get_map = OdriveReg<307, OdriveRegType::Function, false, false>;
    using axis0__motor__alpha_beta_controller__current_meas_phA = OdriveReg<310, OdriveRegType::Float, true, false>;
    using axis0__motor__alpha_beta_controller__current_meas_phB = OdriveReg<311, OdriveRegType::Float, true, false>;
    using axis0__motor__alpha_beta_controller__current_meas_phC = OdriveReg<312, OdriveRegType::Float, true, false>;
    using axis0__motor__alpha_beta_controller__current_meas_status_phA = OdriveReg<313, OdriveRegType::UInt32, true, false>;
    using axis0__motor__alpha_beta_controller__current_meas_status_phB = OdriveReg<314, OdriveRegType::UInt32, true, false>;
    using axis0__motor__alpha_beta_controller__current_meas_status_phC = OdriveReg<315, OdriveRegType::UInt32, true, false>;
    using axis0__motor__alpha_beta_controller__I_bus = OdriveReg<316, OdriveRegType::Float, true, false>;
    using axis0__motor__alpha_beta_controller__Ialpha_measured = OdriveReg<317, OdriveRegType::Float, true, false>;
    using axis0__motor__alpha_beta_controller__Ibeta_measured = OdriveReg<318, OdriveRegType::Float, true, false>;
    using axis0__motor__alpha_beta_controller__max_measurable_current = OdriveReg<319, OdriveRegType::Float, true, false>;
    using axis0__motor__alpha_beta_controller__power = OdriveReg<320, OdriveRegType::Float, true, false>;
    using axis0__motor__alpha_beta_controller__n_evt_current_measurement = OdriveReg<321, OdriveRegType::UInt32, true, false>;
    using axis0__motor__alpha_beta_controller__n_evt_pwm_update = OdriveReg<322, OdriveRegType::UInt32, true, false>;
    using axis0__motor__foc__p_gain = OdriveReg<323, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__i_gain = OdriveReg<324, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__I_measured_report_filter_k = OdriveReg<325, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__Id_setpoint = OdriveReg<326, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__Iq_setpoint = OdriveReg<327, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__Vd_setpoint = OdriveReg<328, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__Vq_setpoint = OdriveReg<329, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__phase = OdriveReg<330, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__phase_vel = OdriveReg<331, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__Id_measured = OdriveReg<332, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__Iq_measured = OdriveReg<333, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__v_current_control_integral_d = OdriveReg<334, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__v_current_control_integral_q = OdriveReg<335, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__mod_d = OdriveReg<336, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__mod_q = OdriveReg<337, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__final_v_alpha = OdriveReg<338, OdriveRegType::Float, true, false>;
    using axis0__motor__foc__final_v_beta = OdriveReg<339, OdriveRegType::Float, true, false>;
    using axis0__motor__fet_thermistor__temperature = OdriveReg<340, OdriveRegType::Float, true, false>;
    using axis0__motor__motor_thermistor__temperature = OdriveReg<341, OdriveRegType::Float, true, false>;
    using axis0__motor__motor_thermistor__config__gpio_pin = OdriveReg<342, OdriveRegType::UInt16, true, false>;
    using axis0__motor__motor_thermistor__config__r_ref = OdriveReg<343, OdriveRegType::Float, true, false>;
    using axis0__motor__motor_thermistor__config__t_ref = OdriveReg<344, OdriveRegType::Float, true, false>;
    using axis0__motor__motor_thermistor__config__beta = OdriveReg<345, OdriveRegType::Float, true, false>;
    using axis0__motor__motor_thermistor__config__temp_limit_lower = OdriveReg<346, OdriveRegType::Float, true, false>;
    using axis0__motor__motor_thermistor__config__temp_limit_upper = OdriveReg<347, OdriveRegType::Float, true, false>;
    using axis0__motor__motor_thermistor__config__enabled = OdriveReg<348, OdriveRegType::Bool, true, false>;
    using axis0__motor__acim_estimator__rotor_flux = OdriveReg<349, OdriveRegType::Float, true, false>;
    using axis0__motor__acim_estimator__slip_vel = OdriveReg<350, OdriveRegType::Float, true, false>;
    using axis0__motor__acim_estimator__phase_offset = OdriveReg<351, OdriveRegType::Float, true, false>;
    using axis0__motor__acim_estimator__stator_phase_vel = OdriveReg<352, OdriveRegType::Float, true, false>;
    using axis0__motor__acim_estimator__stator_phase = OdriveReg<353, OdriveRegType::Float, true, false>;
    using axis0__motor__sensorless_estimator__phase = OdriveReg<354, OdriveRegType::Float, true, false>;
    using axis0__motor__sensorless_estimator__pll_pos = OdriveReg<355, OdriveRegType::Float, true, false>;
    using axis0__motor__sensorless_estimator__phase_vel = OdriveReg<356, OdriveRegType::Float, true, false>;
    using axis0__motor__torque_estimate = OdriveReg<357, OdriveRegType::Float, true, false>;
    using axis0__motor__mechanical_power = OdriveReg<358, OdriveRegType::Float, true, false>;
    using axis0__motor__electrical_power = OdriveReg<359, OdriveRegType::Float, true, false>;
    using axis0__motor__effective_current_lim = OdriveReg<360, OdriveRegType::Float, true, false>;
    using axis0__motor__resistance_calibration_I_beta = OdriveReg<361, OdriveRegType::Float, true, false>;
    using axis0__motor__input_id = OdriveReg<362, OdriveRegType::Float, true, false>;
    using axis0__motor__input_iq = OdriveReg<363, OdriveRegType::Float, true, false>;
    using axis0__controller__input_pos = OdriveReg<364, OdriveRegType::Float, true, false>;
    using axis0__controller__input_vel = OdriveReg<365, OdriveRegType::Float, true, false>;
    using axis0__controller__input_torque = OdriveReg<366, OdriveRegType::Float, true, false>;
    using axis0__controller__pos_setpoint = OdriveReg<367, OdriveRegType::Float, true, false>;
    using axis0__controller__vel_setpoint = OdriveReg<368, OdriveRegType::Float, true, false>;
    using axis0__controller__torque_setpoint = OdriveReg<369, OdriveRegType::Float, true, false>;
    using axis0__controller__effective_torque_setpoint = OdriveReg<370, OdriveRegType::Float, true, false>;
    using axis0__controller__trajectory_done = OdriveReg<371, OdriveRegType::Bool, true, false>;
    using axis0__controller__vel_integrator_torque = OdriveReg<372, OdriveRegType::Float, true, false>;
    using axis0__controller__autotuning_phase = OdriveReg<373, OdriveRegType::Float, true, false>;
    using axis0__controller__config__enable_vel_limit = OdriveReg<374, OdriveRegType::Bool, true, false>;
    using axis0__controller__config__enable_torque_mode_vel_limit = OdriveReg<375, OdriveRegType::Bool, true, false>;
    using axis0__controller__config__enable_gain_scheduling = OdriveReg<376, OdriveRegType::Bool, true, false>;
    using axis0__controller__config__gain_scheduling_width = OdriveReg<377, OdriveRegType::Float, true, false>;
    using axis0__controller__config__enable_overspeed_error = OdriveReg<378, OdriveRegType::Bool, true, false>;
    using axis0__controller__config__control_mode = OdriveReg<379, OdriveRegType::UInt8, true, false>;
    using axis0__controller__config__input_mode = OdriveReg<380, OdriveRegType::UInt8, true, false>;
    using axis0__controller__config__pos_gain = OdriveReg<381, OdriveRegType::Float, true, false>;
    using axis0__controller__config__vel_gain = OdriveReg<382, OdriveRegType::Float, true, false>;
    using axis0__controller__config__vel_integrator_gain = OdriveReg<383, OdriveRegType::Float, true, false>;
    using axis0__controller__config__vel_integrator_limit = OdriveReg<384, OdriveRegType::Float, true, false>;
    using axis0__controller__config__vel_limit = OdriveReg<385, OdriveRegType::Float, true, false>;
    using axis0__controller__config__vel_limit_tolerance = OdriveReg<386, OdriveRegType::Float, true, false>;
    using axis0__controller__config__vel_ramp_rate = OdriveReg<387, OdriveRegType::Float, true, false>;
    using axis0__controller__config__torque_ramp_rate = OdriveReg<388, OdriveRegType::Float, true, false>;
    using axis0__controller__config__circular_setpoints = OdriveReg<389, OdriveRegType::Bool, true, false>;
    using axis0__controller__config__circular_setpoint_range = OdriveReg<390, OdriveRegType::Float, true, false>;
    using axis0__controller__config__absolute_setpoints = OdriveReg<391, OdriveRegType::Bool, true, false>;
    using axis0__controller__config__use_commutation_vel = OdriveReg<392, OdriveRegType::Bool, true, false>;
    using axis0__controller__config__commutation_vel_scale = OdriveReg<393, OdriveRegType::Float, true, false>;
    using axis0__controller__config__steps_per_circular_range = OdriveReg<394, OdriveRegType::Int32, true, false>;
    using axis0__controller__config__homing_speed = OdriveReg<395, OdriveRegType::Float, true, false>;
    using axis0__controller__config__inertia = OdriveReg<396, OdriveRegType::Float, true, false>;
    using axis0__controller__config__input_filter_bandwidth = OdriveReg<397, OdriveRegType::Float, true, false>;
    using axis0__controller__config__spinout_mechanical_power_bandwidth = OdriveReg<398, OdriveRegType::Float, true, false>;
    using axis0__controller__config__spinout_electrical_power_bandwidth = OdriveReg<399, OdriveRegType::Float, true, false>;
    using axis0__controller__config__spinout_mechanical_power_threshold = OdriveReg<400, OdriveRegType::Float, true, false>;
    using axis0__controller__config__spinout_electrical_power_threshold = OdriveReg<401, OdriveRegType::Float, true, false>;
    using axis0__controller__autotuning__frequency = OdriveReg<402, OdriveRegType::Float, true, false>;
    using axis0__controller__autotuning__pos_amplitude = OdriveReg<403, OdriveRegType::Float, true, false>;
    using axis0__controller__autotuning__vel_amplitude = OdriveReg<404, OdriveRegType::Float, true, false>;
    using axis0__controller__autotuning__torque_amplitude = OdriveReg<405, OdriveRegType::Float, true, false>;
    using axis0__controller__autotuning__vel_burst_factor = OdriveReg<406, OdriveRegType::UInt8, true, false>;
    using axis0__controller__spinout_mechanical_power = OdriveReg<407, OdriveRegType::Float, true, false>;
    using axis0__controller__spinout_electrical_power = OdriveReg<408, OdriveRegType::Float, true, false>;
    using axis0__controller__move_incremental = OdriveReg<409, OdriveRegType::Function, false, false>;
    using axis0__trap_traj__config__vel_limit = OdriveReg<412, OdriveRegType::Float, true, false>;
    using axis0__trap_traj__config__accel_limit = OdriveReg<413, OdriveRegType::Float, true, false>;
    using axis0__trap_traj__config__decel_limit = OdriveReg<414, OdriveRegType::Float, true, false>;
    using axis0__min_endstop__endstop_state = OdriveReg<415, OdriveRegType::Bool, true, false>;
    using axis0__min_endstop__config__gpio_num = OdriveReg<416, OdriveRegType::UInt16, true, false>;
    using axis0__min_endstop__config__enabled = OdriveReg<417, OdriveRegType::Bool, true, false>;
    using axis0__min_endstop__config__offset = OdriveReg<418, OdriveRegType::Float, true, false>;
    using axis0__min_endstop__config__is_active_high = OdriveReg<419, OdriveRegType::Bool, true, false>;
    using axis0__min_endstop__config__debounce_ms = OdriveReg<420, OdriveRegType::UInt32, true, false>;
    using axis0__max_endstop__endstop_state = OdriveReg<421, OdriveRegType::Bool, true, false>;
    using axis0__max_endstop__config__gpio_num = OdriveReg<422, OdriveRegType::UInt16, true, false>;
    using axis0__max_endstop__config__enabled = OdriveReg<423, OdriveRegType::Bool, true, false>;
    using axis0__max_endstop__config__offset = OdriveReg<424, OdriveRegType::Float, true, false>;
    using axis0__max_endstop__config__is_active_high = OdriveReg<425, OdriveRegType::Bool, true, false>;
    using axis0__max_endstop__config__debounce_ms = OdriveReg<426, OdriveRegType::UInt32, true, false>;
    using axis0__mechanical_brake__config__gpio_num = OdriveReg<427, OdriveRegType::UInt16, true, false>;
    using axis0__mechanical_brake__config__is_active_low = OdriveReg<428, OdriveRegType::Bool, true, false>;
    using axis0__mechanical_brake__engage = OdriveReg<429, OdriveRegType::Function, false, false>;
    using axis0__mechanical_brake__release = OdriveReg<430, OdriveRegType::Function, false, false>;
    using axis0__pos_vel_mapper__status = OdriveReg<431, OdriveRegType::UInt8, true, false>;
    using axis0__pos_vel_mapper__pos_rel = OdriveReg<432, OdriveRegType::Float, true, false>;
    using axis0__pos_vel_mapper__pos_abs = OdriveReg<433, OdriveRegType::Float, true, false>;
    using axis0__pos_vel_mapper__vel = OdriveReg<434, OdriveRegType::Float, true, false>;
    using axis0__pos_vel_mapper__config__circular = OdriveReg<435, OdriveRegType::Bool, true, false>;
    using axis0__pos_vel_mapper__config__circular_output_range = OdriveReg<436, OdriveRegType::Float, true, false>;
    using axis0__pos_vel_mapper__config__scale = OdriveReg<437, OdriveRegType::Float, true, false>;
    using axis0__pos_vel_mapper__config__offset_valid = OdriveReg<438, OdriveRegType::Bool, true, false>;
    using axis0__pos_vel_mapper__config__offset = OdriveReg<439, OdriveRegType::Float, true, false>;
    using axis0__pos_vel_mapper__config__approx_init_pos_valid = OdriveReg<440, OdriveRegType::Bool, true, false>;
    using axis0__pos_vel_mapper__config__approx_init_pos = OdriveReg<441, OdriveRegType::Float, true, false>;
    using axis0__pos_vel_mapper__config__index_offset_valid = OdriveReg<442, OdriveRegType::Bool, true, false>;
    using axis0__pos_vel_mapper__config__index_offset = OdriveReg<443, OdriveRegType::Float, true, false>;
    using axis0__pos_vel_mapper__config__use_index_gpio = OdriveReg<444, OdriveRegType::Bool, true, false>;
    using axis0__pos_vel_mapper__config__index_search_always_on = OdriveReg<445, OdriveRegType::Bool, true, false>;
    using axis0__pos_vel_mapper__config__index_gpio = OdriveReg<446, OdriveRegType::UInt8, true, false>;
    using axis0__pos_vel_mapper__config__use_endstop = OdriveReg<447, OdriveRegType::Bool, true, false>;
    using axis0__pos_vel_mapper__set_abs_pos = OdriveReg<448, OdriveRegType::Function, false, false>;
    using axis0__commutation_mapper__status = OdriveReg<451, OdriveRegType::UInt8, true, false>;
    using axis0__commutation_mapper__pos_rel = OdriveReg<452, OdriveRegType::Float, true, false>;
    using axis0__commutation_mapper__pos_abs = OdriveReg<453, OdriveRegType::Float, true, false>;
    using axis0__commutation_mapper__vel = OdriveReg<454, OdriveRegType::Float, true, false>;
    using axis0__commutation_mapper__config__circular = OdriveReg<455, OdriveRegType::Bool, true, false>;
    using axis0__commutation_mapper__config__circular_output_range = OdriveReg<456, OdriveRegType::Float, true, false>;
    using axis0__commutation_mapper__config__scale = OdriveReg<457, OdriveRegType::Float, true, false>;
    using axis0__commutation_mapper__config__offset_valid = OdriveReg<458, OdriveRegType::Bool, true, false>;
    using axis0__commutation_mapper__config__offset = OdriveReg<459, OdriveRegType::Float, true, false>;
    using axis0__commutation_mapper__config__approx_init_pos_valid = OdriveReg<460, OdriveRegType::Bool, true, false>;
    using axis0__commutation_mapper__config__approx_init_pos = OdriveReg<461, OdriveRegType::Float, true, false>;
    using axis0__commutation_mapper__config__index_offset_valid = OdriveReg<462, OdriveRegType::Bool, true, false>;
    using axis0__commutation_mapper__config__index_offset = OdriveReg<463, OdriveRegType::Float, true, false>;
    using axis0__commutation_mapper__config__use_index_gpio = OdriveReg<464, OdriveRegType::Bool, true, false>;
    using axis0__commutation_mapper__config__index_search_always_on = OdriveReg<465, OdriveRegType::Bool, true, false>;
    using axis0__commutation_mapper__config__index_gpio = OdriveReg<466, OdriveRegType::UInt8, true, false>;
    using axis0__commutation_mapper__config__use_endstop = OdriveReg<467, OdriveRegType::Bool, true, false>;
    using axis0__commutation_mapper__set_abs_pos = OdriveReg<468, OdriveRegType::Function, false, false>;
    using axis0__interpolator__status = OdriveReg<471, OdriveRegType::UInt8, true, false>;
    using axis0__interpolator__interpolation = OdriveReg<472, OdriveRegType::Float, true, false>;
    using axis0__interpolator__config__dynamic = OdriveReg<473, OdriveRegType::Bool, true, false>;
    using axis0__task_times__thermistor_update__start_time = OdriveReg<474, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__thermistor_update__end_time = OdriveReg<475, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__thermistor_update__length = OdriveReg<476, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__thermistor_update__max_length = OdriveReg<477, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__sensorless_estimator_update__start_time = OdriveReg<478, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__sensorless_estimator_update__end_time = OdriveReg<479, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__sensorless_estimator_update__length = OdriveReg<480, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__sensorless_estimator_update__max_length = OdriveReg<481, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__endstop_update__start_time = OdriveReg<482, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__endstop_update__end_time = OdriveReg<483, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__endstop_update__length = OdriveReg<484, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__endstop_update__max_length = OdriveReg<485, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__can_heartbeat__start_time = OdriveReg<486, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__can_heartbeat__end_time = OdriveReg<487, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__can_heartbeat__length = OdriveReg<488, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__can_heartbeat__max_length = OdriveReg<489, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__controller_update__start_time = OdriveReg<490, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__controller_update__end_time = OdriveReg<491, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__controller_update__length = OdriveReg<492, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__controller_update__max_length = OdriveReg<493, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__open_loop_vector_generator_update__start_time = OdriveReg<494, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__open_loop_vector_generator_update__end_time = OdriveReg<495, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__open_loop_vector_generator_update__length = OdriveReg<496, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__open_loop_vector_generator_update__max_length = OdriveReg<497, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__acim_estimator_update__start_time = OdriveReg<498, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__acim_estimator_update__end_time = OdriveReg<499, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__acim_estimator_update__length = OdriveReg<500, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__acim_estimator_update__max_length = OdriveReg<501, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__motor_update__start_time = OdriveReg<502, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__motor_update__end_time = OdriveReg<503, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__motor_update__length = OdriveReg<504, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__motor_update__max_length = OdriveReg<505, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__current_controller_update__start_time = OdriveReg<506, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__current_controller_update__end_time = OdriveReg<507, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__current_controller_update__length = OdriveReg<508, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__current_controller_update__max_length = OdriveReg<509, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__current_sense__start_time = OdriveReg<510, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__current_sense__end_time = OdriveReg<511, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__current_sense__length = OdriveReg<512, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__current_sense__max_length = OdriveReg<513, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__pwm_update__start_time = OdriveReg<514, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__pwm_update__end_time = OdriveReg<515, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__pwm_update__length = OdriveReg<516, OdriveRegType::UInt32, true, false>;
    using axis0__task_times__pwm_update__max_length = OdriveReg<517, OdriveRegType::UInt32, true, false>;
    using axis0__procedure_result = OdriveReg<518, OdriveRegType::UInt8, true, false>;
    using axis0__disarm_time = OdriveReg<519, OdriveRegType::Float, true, false>;
    using axis0__is_armed = OdriveReg<520, OdriveRegType::Bool, true, false>;
    using axis0__watchdog_feed = OdriveReg<521, OdriveRegType::Function, false, false>;
    using axis0__set_abs_pos = OdriveReg<522, OdriveRegType::Function, false, false>;
    using onboard_encoder0__status = OdriveReg<525, OdriveRegType::UInt8, true, false>;
    using onboard_encoder0__raw = OdriveReg<526, OdriveRegType::Float, true, false>;
    using onboard_encoder0__get_field_strength = OdriveReg<527, OdriveRegType::Function, false, false>;
    using inc_encoder0__status = OdriveReg<529, OdriveRegType::UInt8, true, false>;
    using inc_encoder0__pos_min = OdriveReg<530, OdriveRegType::Float, true, false>;
    using inc_encoder0__pos_max = OdriveReg<531, OdriveRegType::Float, true, false>;
    using inc_encoder0__pos_residual = OdriveReg<532, OdriveRegType::Float, true, false>;
    using inc_encoder0__raw = OdriveReg<533, OdriveRegType::UInt16, true, false>;
    using inc_encoder0__config__enabled = OdriveReg<534, OdriveRegType::Bool, true, false>;
    using inc_encoder0__config__cpr = OdriveReg<535, OdriveRegType::UInt32, true, false>;
    using inc_encoder1__status = OdriveReg<536, OdriveRegType::UInt8, true, false>;
    using inc_encoder1__pos_min = OdriveReg<537, OdriveRegType::Float, true, false>;
    using inc_encoder1__pos_max = OdriveReg<538, OdriveRegType::Float, true, false>;
    using inc_encoder1__pos_residual = OdriveReg<539, OdriveRegType::Float, true, false>;
    using inc_encoder1__raw = OdriveReg<540, OdriveRegType::UInt16, true, false>;
    using inc_encoder1__config__enabled = OdriveReg<541, OdriveRegType::Bool, true, false>;
    using inc_encoder1__config__cpr = OdriveReg<542, OdriveRegType::UInt32, true, false>;
    using hall_encoder0__status = OdriveReg<543, OdriveRegType::UInt8, true, false>;
    using hall_encoder0__hall_cnt = OdriveReg<544, OdriveRegType::UInt8, true, false>;
    using hall_encoder0__raw_hall_state = OdriveReg<545, OdriveRegType::UInt8, true, false>;
    using hall_encoder0__abs_pos_min = OdriveReg<546, OdriveRegType::Float, true, false>;
    using hall_encoder0__abs_pos_max = OdriveReg<547, OdriveRegType::Float, true, false>;
    using hall_encoder0__config__enabled = OdriveReg<548, OdriveRegType::Bool, true, false>;
    using hall_encoder0__config__hall_polarity = OdriveReg<549, OdriveRegType::UInt8, true, false>;
    using hall_encoder0__config__hall_polarity_calibrated = OdriveReg<550, OdriveRegType::Bool, true, false>;
    using hall_encoder0__config__ignore_illegal_hall_state = OdriveReg<551, OdriveRegType::Bool, true, false>;
    using hall_encoder1__status = OdriveReg<552, OdriveRegType::UInt8, true, false>;
    using hall_encoder1__hall_cnt = OdriveReg<553, OdriveRegType::UInt8, true, false>;
    using hall_encoder1__raw_hall_state = OdriveReg<554, OdriveRegType::UInt8, true, false>;
    using hall_encoder1__abs_pos_min = OdriveReg<555, OdriveRegType::Float, true, false>;
    using hall_encoder1__abs_pos_max = OdriveReg<556, OdriveRegType::Float, true, false>;
    using hall_encoder1__config__enabled = OdriveReg<557, OdriveRegType::Bool, true, false>;
    using hall_encoder1__config__hall_polarity = OdriveReg<558, OdriveRegType::UInt8, true, false>;
    using hall_encoder1__config__hall_polarity_calibrated = OdriveReg<559, OdriveRegType::Bool, true, false>;
    using hall_encoder1__config__ignore_illegal_hall_state = OdriveReg<560, OdriveRegType::Bool, true, false>;
    using spi_encoder0__status = OdriveReg<561, OdriveRegType::UInt8, true, false>;
    using spi_encoder0__raw = OdriveReg<562, OdriveRegType::Float, true, false>;
    using spi_encoder0__n_errors = OdriveReg<563, OdriveRegType::UInt32, true, false>;
    using spi_encoder0__inject_errors = OdriveReg<564, OdriveRegType::Bool, true, false>;
    using spi_encoder0__config__ncs_gpio = OdriveReg<565, OdriveRegType::UInt8, true, false>;
    using spi_encoder0__config__mode = OdriveReg<566, OdriveRegType::UInt8, true, false>;
    using spi_encoder0__config__delay = OdriveReg<567, OdriveRegType::Float, true, false>;
    using spi_encoder0__config__max_error_rate = OdriveReg<568, OdriveRegType::Float, true, false>;
    using spi_encoder0__config__baudrate = OdriveReg<569, OdriveRegType::UInt32, true, false>;
    using spi_encoder0__get_field_strength = OdriveReg<570, OdriveRegType::Function, false, false>;
    using spi_encoder1__status = OdriveReg<572, OdriveRegType::UInt8, true, false>;
    using spi_encoder1__raw = OdriveReg<573, OdriveRegType::Float, true, false>;
    using spi_encoder1__n_errors = OdriveReg<574, OdriveRegType::UInt32, true, false>;
    using spi_encoder1__inject_errors = OdriveReg<575, OdriveRegType::Bool, true, false>;
    using spi_encoder1__config__ncs_gpio = OdriveReg<576, OdriveRegType::UInt8, true, false>;
    using spi_encoder1__config__mode = OdriveReg<577, OdriveRegType::UInt8, true, false>;
    using spi_encoder1__config__delay = OdriveReg<578, OdriveRegType::Float, true, false>;
    using spi_encoder1__config__max_error_rate = OdriveReg<579, OdriveRegType::Float, true, false>;
    using spi_encoder1__config__baudrate = OdriveReg<580, OdriveRegType::UInt32, true, false>;
    using spi_encoder1__get_field_strength = OdriveReg<581, OdriveRegType::Function, false, false>;
    using encoder_estimator0__status = OdriveReg<583, OdriveRegType::UInt8, true, false>;
    using encoder_estimator0__pos_estimate = OdriveReg<584, OdriveRegType::Float, true, false>;
    using encoder_estimator0__vel_estimate = OdriveReg<585, OdriveRegType::Float, true, false>;
    using encoder_estimator1__status = OdriveReg<586, OdriveRegType::UInt8, true, false>;
    using encoder_estimator1__pos_estimate = OdriveReg<587, OdriveRegType::Float, true, false>;
    using encoder_estimator1__vel_estimate = OdriveReg<588, OdriveRegType::Float, true, false>;
    using test_function = OdriveReg<589, OdriveRegType::Function, false, false>;
    using get_adc_voltage = OdriveReg<592, OdriveRegType::Function, false, false>;
    using save_configuration = OdriveReg<595, OdriveRegType::Function, false, false>;
    using erase_configuration = OdriveReg<597, OdriveRegType::Function, false, false>;
    using reboot = OdriveReg<598, OdriveRegType::Function, false, false>;
    using enter_dfu_mode = OdriveReg<599, OdriveRegType::Function, false, false>;
    using enter_dfu_mode2 = OdriveReg<600, OdriveRegType::Function, false, false>;
    using disable_bootloader = OdriveReg<602, OdriveRegType::Function, false, false>;
    using get_interrupt_status = OdriveReg<604, OdriveRegType::Function, false, false>;
    using get_dma_status = OdriveReg<607, OdriveRegType::Function, false, false>;
    using get_gpio_states = OdriveReg<610, OdriveRegType::Function, false, false>;
    using set_gpio = OdriveReg<612, OdriveRegType::Function, false, false>;
    using get_drv_fault = OdriveReg<616, OdriveRegType::Function, false, false>;
    using clear_errors = OdriveReg<618, OdriveRegType::Function, false, false>;
    using get_raw_8 = OdriveReg<619, OdriveRegType::Function, false, false>;
    using get_raw = OdriveReg<622, OdriveRegType::Function, false, false>;
    using get_raw_32 = OdriveReg<625, OdriveRegType::Function, false, false>;
    using get_raw_256 = OdriveReg<628, OdriveRegType::Function, false, false>;

 } // namespace odrive_reg

#endif // ODRIVE_REG_0_6_7_HPP
